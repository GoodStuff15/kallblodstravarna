// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using resortapi.Data;

#nullable disable

namespace resortapi.Migrations
{
    [DbContext(typeof(ResortContext))]
    [Migration("20250530073703_innit")]
    partial class innit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccomodationAccessibility", b =>
                {
                    b.Property<int>("AccessibilityId")
                        .HasColumnType("int");

                    b.Property<int>("AccomodationId")
                        .HasColumnType("int");

                    b.HasKey("AccessibilityId", "AccomodationId");

                    b.HasIndex("AccomodationId");

                    b.ToTable("AccomodationAccessibility");

                    b.HasData(
                        new
                        {
                            AccessibilityId = 1,
                            AccomodationId = 1
                        },
                        new
                        {
                            AccessibilityId = 2,
                            AccomodationId = 2
                        },
                        new
                        {
                            AccessibilityId = 1,
                            AccomodationId = 3
                        },
                        new
                        {
                            AccessibilityId = 2,
                            AccomodationId = 3
                        });
                });

            modelBuilder.Entity("AdditionalOptionBooking", b =>
                {
                    b.Property<int>("AdditionalOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.HasKey("AdditionalOptionsId", "BookingsId");

                    b.HasIndex("BookingsId");

                    b.ToTable("AdditionalOptionBooking");
                });

            modelBuilder.Entity("BookingPriceChanges", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("PriceChangesId")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "PriceChangesId");

                    b.HasIndex("PriceChangesId");

                    b.ToTable("BookingPriceChanges");
                });

            modelBuilder.Entity("resortlibrary.Models.Accessibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accessibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tillgänglig med rullstol",
                            Name = "Rullstolsanpassad"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Utrustning för hörselskadade",
                            Name = "Hörselhjälpmedel"
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.Accomodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccomodationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationTypeId");

                    b.ToTable("Accommodations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccomodationTypeId = 1,
                            MaxOccupancy = 1,
                            Name = "101A"
                        },
                        new
                        {
                            Id = 2,
                            AccomodationTypeId = 2,
                            MaxOccupancy = 2,
                            Name = "202B"
                        },
                        new
                        {
                            Id = 3,
                            AccomodationTypeId = 3,
                            MaxOccupancy = 4,
                            Name = "Penthouse 1"
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.AccomodationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccomodationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 800m,
                            Description = "Ett rum med en säng",
                            Name = "Enkelrum"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 1200m,
                            Description = "Rum med två sängar",
                            Name = "Dubbelrum"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 2500m,
                            Description = "Lyxsvit med utsikt",
                            Name = "Svit"
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.AdditionalOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bufféfrukost",
                            Name = "Frukost",
                            Price = 120m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Utcheckning kl 14",
                            Name = "Sen utcheckning",
                            Price = 200m
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccomodationId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeOfBooking")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccomodationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccomodationId = 2,
                            Active = true,
                            AmountPaid = 2640m,
                            Cancelled = false,
                            CheckIn = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cost = 2640m,
                            CustomerId = 1,
                            TimeOfBooking = new DateTime(2025, 5, 20, 12, 34, 56, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccomodationId = 3,
                            Active = false,
                            AmountPaid = 0m,
                            CancellationDate = new DateTime(2025, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cancelled = false,
                            CheckIn = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Cost = 5000m,
                            CustomerId = 2,
                            TimeOfBooking = new DateTime(2025, 5, 21, 9, 10, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "anna@example.com",
                            FirstName = "Anna",
                            LastName = "Svensson",
                            PaymentMethod = "Kort",
                            Phone = "0701234567",
                            Type = "Privat"
                        },
                        new
                        {
                            Id = 2,
                            Email = "lars@firma.se",
                            FirstName = "Lars",
                            LastName = "Andersson",
                            PaymentMethod = "Faktura",
                            Phone = "0739876543",
                            Type = "Företag"
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChild")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Guests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 34,
                            BookingId = 1,
                            FirstName = "Anna",
                            IsChild = false,
                            LastName = "Svensson"
                        },
                        new
                        {
                            Id = 2,
                            Age = 28,
                            BookingId = 1,
                            FirstName = "Maria",
                            IsChild = false,
                            LastName = "Nilsson"
                        },
                        new
                        {
                            Id = 3,
                            Age = 45,
                            BookingId = 2,
                            FirstName = "Lars",
                            IsChild = false,
                            LastName = "Andersson"
                        },
                        new
                        {
                            Id = 4,
                            Age = 42,
                            BookingId = 2,
                            FirstName = "Eva",
                            IsChild = false,
                            LastName = "Karlsson"
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.PriceChanges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("PriceChange")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceChanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PriceChange = 1f,
                            Type = "Weekend-tillägg"
                        },
                        new
                        {
                            Id = 2,
                            PriceChange = 1f,
                            Type = "Kompis till chefen"
                        });
                });

            modelBuilder.Entity("resortlibrary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "Adminadmin123#",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = "Reception123#",
                            Role = "User",
                            Username = "reception"
                        });
                });

            modelBuilder.Entity("AccomodationAccessibility", b =>
                {
                    b.HasOne("resortlibrary.Models.Accessibility", null)
                        .WithMany()
                        .HasForeignKey("AccessibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resortlibrary.Models.Accomodation", null)
                        .WithMany()
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdditionalOptionBooking", b =>
                {
                    b.HasOne("resortlibrary.Models.AdditionalOption", null)
                        .WithMany()
                        .HasForeignKey("AdditionalOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resortlibrary.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingPriceChanges", b =>
                {
                    b.HasOne("resortlibrary.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resortlibrary.Models.PriceChanges", null)
                        .WithMany()
                        .HasForeignKey("PriceChangesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("resortlibrary.Models.Accomodation", b =>
                {
                    b.HasOne("resortlibrary.Models.AccomodationType", "AccomodationType")
                        .WithMany("Accomodations")
                        .HasForeignKey("AccomodationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccomodationType");
                });

            modelBuilder.Entity("resortlibrary.Models.Booking", b =>
                {
                    b.HasOne("resortlibrary.Models.Accomodation", "Accomodation")
                        .WithMany("Bookings")
                        .HasForeignKey("AccomodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("resortlibrary.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accomodation");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("resortlibrary.Models.Guest", b =>
                {
                    b.HasOne("resortlibrary.Models.Booking", "Booking")
                        .WithMany("Guests")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("resortlibrary.Models.User", b =>
                {
                    b.HasOne("resortlibrary.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("resortlibrary.Models.Accomodation", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("resortlibrary.Models.AccomodationType", b =>
                {
                    b.Navigation("Accomodations");
                });

            modelBuilder.Entity("resortlibrary.Models.Booking", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("resortlibrary.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
